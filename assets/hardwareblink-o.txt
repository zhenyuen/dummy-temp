cd hardwareblink; make clean; make;
make[1]: Entering directory '/gb3-resources/hardwareblink'
rm -f *.json *.blif *.asc *.bin
make[1]: Leaving directory '/gb3-resources/hardwareblink'
make[1]: Entering directory '/gb3-resources/hardwareblink'
mkdir -p /gb3-resources/build
yosys -p "synth_ice40 -blif hardwareblink.blif; write_json hardwareblink.json" hardwareblink.v

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 UNKNOWN, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Parsing `hardwareblink.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: hardwareblink.v
Parsing Verilog input from `hardwareblink.v' to AST representation.
Generating RTLIL representation for module `\blink'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -blif hardwareblink.blif; write_json hardwareblink.json' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Finding top of design hierarchy..
root of   1 design levels: blink               
Automatically selected blink as design top module.

2.2.2. Analyzing design hierarchy..
Top module:  \blink

2.2.3. Analyzing design hierarchy..
Top module:  \blink
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$hardwareblink.v:25$1 in module blink.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 2 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\blink.$proc$hardwareblink.v:8$6'.
  Set init value: \count = 0
Found init rule in `\blink.$proc$hardwareblink.v:7$5'.
  Set init value: \LEDstatus = 1'1

2.3.5. Executing PROC_ARST pass (detect async resets in processes).

2.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\blink.$proc$hardwareblink.v:8$6'.
Creating decoders for process `\blink.$proc$hardwareblink.v:7$5'.
Creating decoders for process `\blink.$proc$hardwareblink.v:25$1'.
     1/2: $0\count[31:0]
     2/2: $0\LEDstatus[0:0]

2.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

2.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\blink.\LEDstatus' using process `\blink.$proc$hardwareblink.v:25$1'.
  created $dff cell `$procdff$353' with positive edge clock.
Creating register for signal `\blink.\count' using process `\blink.$proc$hardwareblink.v:25$1'.
  created $dff cell `$procdff$354' with positive edge clock.

2.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `blink.$proc$hardwareblink.v:8$6'.
Removing empty process `blink.$proc$hardwareblink.v:7$5'.
Found and cleaned up 1 empty switch in `\blink.$proc$hardwareblink.v:25$1'.
Removing empty process `blink.$proc$hardwareblink.v:25$1'.
Cleaned up 1 empty switch.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module blink..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blink'.
Removed a total of 0 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \blink..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \blink.
Performed a total of 0 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blink'.
Removed a total of 0 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.

2.10.9. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 8 bits (of 32) from port B of cell blink.$gt$hardwareblink.v:26$2 ($gt).
Removed top 31 bits (of 32) from port B of cell blink.$add$hardwareblink.v:31$4 ($add).

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~30 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module blink:
  creating $macc model for $add$hardwareblink.v:31$4 ($add).
  creating $alu model for $macc $add$hardwareblink.v:31$4.
  creating $alu model for $gt$hardwareblink.v:26$2 ($gt): new $alu
  creating $alu cell for $gt$hardwareblink.v:26$2: $auto$alumacc.cc:485:replace_alu$356
  creating $alu cell for $add$hardwareblink.v:31$4: $auto$alumacc.cc:485:replace_alu$361
  created 2 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.
<suppressed ~2 debug messages>

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blink'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \blink..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \blink.
Performed a total of 0 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blink'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..
Removed 1 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.

2.19.9. Rerunning OPT passes. (Maybe there is more to do..)

2.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \blink..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

2.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \blink.
Performed a total of 0 changes.

2.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blink'.
Removed a total of 0 cells.

2.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..

2.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.

2.19.16. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blink'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.22.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.22.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..

2.22.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..

2.22.6. Executing MEMORY_COLLECT pass (generating $mem cells).

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blink'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blink'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \blink..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \blink.
Performed a total of 0 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blink'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.

2.29.9. Finished OPT passes. (There is nothing left to do.)

2.30. Executing ICE40_WRAPCARRY pass (wrap carries).

2.31. Executing TECHMAP pass (map to technology primitives).

2.31.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.31.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.31.3. Continuing TECHMAP pass.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=24\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~55 debug messages>

2.32. Executing OPT pass (performing simple optimizations).

2.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.
<suppressed ~138 debug messages>

2.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blink'.
<suppressed ~99 debug messages>
Removed a total of 33 cells.

2.32.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..
Removed 0 unused cells and 42 unused wires.
<suppressed ~1 debug messages>

2.32.5. Finished fast OPT passes.

2.33. Executing ICE40_OPT pass (performing simple optimizations).

2.33.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) blink.$auto$alumacc.cc:485:replace_alu$356.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$356.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) blink.$auto$alumacc.cc:485:replace_alu$361.slice[0].carry: CO=\count [0]

2.33.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.

2.33.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blink'.
Removed a total of 0 cells.

2.33.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.33.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..
Removed 1 unused cells and 0 unused wires.
<suppressed ~1 debug messages>

2.33.6. Rerunning OPT passes. (Removed registers in this run.)

2.33.7. Running ICE40 specific optimizations.

2.33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.

2.33.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blink'.
Removed a total of 0 cells.

2.33.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.33.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..

2.33.12. Finished OPT passes. (There is nothing left to do.)

2.34. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module blink:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$453 to $_DFFE_PP_ for $0\LEDstatus[0:0] -> \LEDstatus.

2.35. Executing TECHMAP pass (map to technology primitives).

2.35.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.35.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~33 debug messages>

2.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.
<suppressed ~2 debug messages>

2.37. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping blink.$auto$alumacc.cc:485:replace_alu$361.slice[0].carry ($lut).

2.38. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in blink.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$485 (SB_DFF): \count [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$453 (SB_DFFE): \LEDstatus = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$454 (SB_DFF): \count [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$455 (SB_DFF): \count [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$456 (SB_DFF): \count [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$457 (SB_DFF): \count [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$458 (SB_DFF): \count [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$459 (SB_DFF): \count [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$460 (SB_DFF): \count [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$461 (SB_DFF): \count [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$462 (SB_DFF): \count [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$463 (SB_DFF): \count [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$464 (SB_DFF): \count [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$465 (SB_DFF): \count [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$466 (SB_DFF): \count [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$467 (SB_DFF): \count [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$468 (SB_DFF): \count [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$469 (SB_DFF): \count [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$470 (SB_DFF): \count [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$471 (SB_DFF): \count [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$472 (SB_DFF): \count [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$473 (SB_DFF): \count [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$474 (SB_DFF): \count [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$475 (SB_DFF): \count [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$476 (SB_DFF): \count [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$477 (SB_DFF): \count [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$478 (SB_DFF): \count [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$479 (SB_DFF): \count [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$480 (SB_DFF): \count [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$481 (SB_DFF): \count [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$482 (SB_DFF): \count [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$483 (SB_DFF): \count [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$484 (SB_DFF): \count [30] = 0

2.39. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in blink.
  Merging $auto$simplemap.cc:277:simplemap_mux$451 (A=1'0, B=$add$hardwareblink.v:31$4_Y [31], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$485 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$420 (A=1'0, B=$auto$simplemap.cc:309:simplemap_lut$768, S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$454 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$421 (A=1'0, B=$add$hardwareblink.v:31$4_Y [1], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$455 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$422 (A=1'0, B=$add$hardwareblink.v:31$4_Y [2], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$456 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$423 (A=1'0, B=$add$hardwareblink.v:31$4_Y [3], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$457 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$424 (A=1'0, B=$add$hardwareblink.v:31$4_Y [4], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$458 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$425 (A=1'0, B=$add$hardwareblink.v:31$4_Y [5], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$459 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$426 (A=1'0, B=$add$hardwareblink.v:31$4_Y [6], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$460 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$427 (A=1'0, B=$add$hardwareblink.v:31$4_Y [7], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$461 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$428 (A=1'0, B=$add$hardwareblink.v:31$4_Y [8], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$462 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$429 (A=1'0, B=$add$hardwareblink.v:31$4_Y [9], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$463 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$430 (A=1'0, B=$add$hardwareblink.v:31$4_Y [10], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$464 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$431 (A=1'0, B=$add$hardwareblink.v:31$4_Y [11], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$465 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$432 (A=1'0, B=$add$hardwareblink.v:31$4_Y [12], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$466 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$433 (A=1'0, B=$add$hardwareblink.v:31$4_Y [13], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$467 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$434 (A=1'0, B=$add$hardwareblink.v:31$4_Y [14], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$468 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$435 (A=1'0, B=$add$hardwareblink.v:31$4_Y [15], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$469 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$436 (A=1'0, B=$add$hardwareblink.v:31$4_Y [16], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$470 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$437 (A=1'0, B=$add$hardwareblink.v:31$4_Y [17], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$471 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$438 (A=1'0, B=$add$hardwareblink.v:31$4_Y [18], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$472 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$439 (A=1'0, B=$add$hardwareblink.v:31$4_Y [19], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$473 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$440 (A=1'0, B=$add$hardwareblink.v:31$4_Y [20], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$474 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$441 (A=1'0, B=$add$hardwareblink.v:31$4_Y [21], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$475 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$442 (A=1'0, B=$add$hardwareblink.v:31$4_Y [22], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$476 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$443 (A=1'0, B=$add$hardwareblink.v:31$4_Y [23], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$477 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$444 (A=1'0, B=$add$hardwareblink.v:31$4_Y [24], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$478 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$445 (A=1'0, B=$add$hardwareblink.v:31$4_Y [25], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$479 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$446 (A=1'0, B=$add$hardwareblink.v:31$4_Y [26], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$480 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$447 (A=1'0, B=$add$hardwareblink.v:31$4_Y [27], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$481 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$448 (A=1'0, B=$add$hardwareblink.v:31$4_Y [28], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$482 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$449 (A=1'0, B=$add$hardwareblink.v:31$4_Y [29], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$483 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$450 (A=1'0, B=$add$hardwareblink.v:31$4_Y [30], S=$auto$alumacc.cc:502:replace_alu$358 [31]) into $auto$simplemap.cc:420:simplemap_dff$484 (SB_DFF).

2.40. Executing ICE40_OPT pass (performing simple optimizations).

2.40.1. Running ICE40 specific optimizations.

2.40.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.
<suppressed ~47 debug messages>

2.40.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blink'.
<suppressed ~102 debug messages>
Removed a total of 34 cells.

2.40.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.40.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..
Removed 32 unused cells and 142 unused wires.
<suppressed ~33 debug messages>

2.40.6. Rerunning OPT passes. (Removed registers in this run.)

2.40.7. Running ICE40 specific optimizations.

2.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.

2.40.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blink'.
Removed a total of 0 cells.

2.40.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.40.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..

2.40.12. Finished OPT passes. (There is nothing left to do.)

2.41. Executing TECHMAP pass (map to technology primitives).

2.41.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.41.2. Continuing TECHMAP pass.
No more expansions possible.

2.42. Executing ABC pass (technology mapping using ABC).

2.42.1. Extracting gate netlist of module `\blink' to `<abc-temp-dir>/input.blif'..
Extracted 34 gates and 68 wires to a netlist network with 34 inputs and 34 outputs.

2.42.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      35.
ABC: Participating nodes from both networks       =      68.
ABC: Participating nodes from the first network   =      34. (  97.14 % of nodes)
ABC: Participating nodes from the second network  =      34. (  97.14 % of nodes)
ABC: Node pairs (any polarity)                    =      34. (  97.14 % of names can be moved)
ABC: Node pairs (same polarity)                   =      34. (  97.14 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.42.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       34
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       34
ABC RESULTS:          output signals:       34
Removing temp directory.

2.43. Executing ICE40_WRAPCARRY pass (wrap carries).

2.44. Executing TECHMAP pass (map to technology primitives).

2.44.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.44.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 32 unused cells and 39 unused wires.

2.45. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:       65
  1-LUT               34
  2-LUT               31

Eliminating LUTs.
Number of LUTs:       65
  1-LUT               34
  2-LUT               31

Combining LUTs.
Number of LUTs:       65
  1-LUT               34
  2-LUT               31

Eliminated 0 LUTs.
Combined 0 LUTs.
<suppressed ~132 debug messages>

2.46. Executing TECHMAP pass (map to technology primitives).

2.46.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.46.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
No more expansions possible.
<suppressed ~91 debug messages>
Removed 0 unused cells and 130 unused wires.

2.47. Executing AUTONAME pass.
Renamed 1083 objects in module blink (14 iterations).
<suppressed ~197 debug messages>

2.48. Executing HIERARCHY pass (managing design hierarchy).

2.48.1. Analyzing design hierarchy..
Top module:  \blink

2.48.2. Analyzing design hierarchy..
Top module:  \blink
Removed 0 unused modules.

2.49. Printing statistics.

=== blink ===

   Number of wires:                 42
   Number of wire bits:            166
   Number of public wires:          42
   Number of public wire bits:     166
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                160
     SB_CARRY                       61
     SB_DFFE                         1
     SB_DFFSR                       32
     SB_HFOSC                        1
     SB_LUT4                        65

2.50. Executing CHECK pass (checking for obvious problems).
checking module blink..
found and reported 0 problems.

2.51. Executing BLIF backend.

3. Executing JSON backend.

End of script. Logfile hash: 0d23ffe415, CPU: user 0.19s system 0.03s, MEM: 51.73 MB peak
Yosys 0.9+2406 (git sha1 UNKNOWN, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 44% 11x read_verilog (0 sec), 10% 18x opt_clean (0 sec), ...
nextpnr-ice40 --up5k --package uwg30 --json hardwareblink.json --pcf hardwareblink.pcf --asc hardwareblink.asc
icepack hardwareblink.asc design.bin
cp design.bin /gb3-resources/build/
make[1]: Leaving directory '/gb3-resources/hardwareblink'
